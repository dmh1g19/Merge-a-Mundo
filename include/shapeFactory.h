#ifndef SHAPE_H
#define SHAPE_H

#include "utilities.h"
#include <memory>
#include <string>
#include <glm/glm.hpp>          // The main GLM header
#include <glm/gtc/type_ptr.hpp>  // For glm::value_ptr
#include <vector>

//TODO: Update to use indexing 

class Shape {
public:
    virtual void init(std::string, std::string) = 0;
    virtual void update(const glm::vec2&, float) = 0; 
    virtual void render() = 0;
    virtual void useShaderProg() = 0;
    virtual void draw() = 0;
    virtual void generateCircleVertices() { };
    
    virtual void setWidthHeight(int, int) { };
    virtual void setRadius(int) { };
    virtual std::vector<std::string> getBinding() { };
    
    virtual ~Shape() = default;
};

class Square : public Shape {
private:
    float vertices[18] = {
        -0.5f,  0.5f, 0.0f, 
         0.5f,  0.5f, 0.0f, 
        -0.5f, -0.5f, 0.0f, 

         0.5f,  0.5f, 0.0f, 
         0.5f, -0.5f, 0.0f, 
        -0.5f, -0.5f, 0.0f  
    };

    int width;
    int height;    
    unsigned int VBO;
    unsigned int VAO;
    unsigned int shaderProgram;
    glm::mat4 transformationMatrix;

public:
    void setWidthHeight(int, int) override;
    void init(std::string, std::string) override;
    void update(const glm::vec2&, float) override;
    void render() override;
    void useShaderProg() override;
    void draw() override;
};

class Ground : public Shape {
private:

    //float vertices[234] = {
    //    0.540000f, 0.772202f, 0.0f,
    //    0.532000f, 0.082202f, 0.0f,
    //    0.888000f, -0.002798f, 0.0f,
    //    0.540000f, 0.772202f, 0.0f,
    //    0.888000f, -0.002798f, 0.0f,
    //    0.888000f, 0.772202f, 0.0f,
    //    0.532000f, 0.082202f, 0.0f,
    //    0.488000f, -0.087798f, 0.0f,
    //    0.452000f, -0.665298f, 0.0f,
    //    0.532000f, 0.082202f, 0.0f,
    //    0.452000f, -0.665298f, 0.0f,
    //    0.624000f, -0.535297f, 0.0f,
    //    0.532000f, 0.082202f, 0.0f,
    //    0.624000f, -0.535297f, 0.0f,
    //    0.748000f, -0.387798f, 0.0f,
    //    0.532000f, 0.082202f, 0.0f,
    //    0.748000f, -0.387798f, 0.0f,
    //    0.848000f, -0.185298f, 0.0f,
    //    0.532000f, 0.082202f, 0.0f,
    //    0.848000f, -0.185298f, 0.0f,
    //    0.888000f, -0.002798f, 0.0f,
    //    -0.540000f, 0.772202f, 0.0f,
    //    -0.888000f, 0.772202f, 0.0f,
    //    -0.884000f, -0.002798f, 0.0f,
    //    -0.540000f, 0.772202f, 0.0f,
    //    -0.884000f, -0.002798f, 0.0f,
    //    -0.540000f, 0.079702f, 0.0f,
    //    -0.540000f, 0.079702f, 0.0f,
    //    -0.884000f, -0.002798f, 0.0f,
    //    -0.848000f, -0.187798f, 0.0f,
    //    -0.540000f, 0.079702f, 0.0f,
    //    -0.848000f, -0.187798f, 0.0f,
    //    -0.764000f, -0.355297f, 0.0f,
    //    -0.540000f, 0.079702f, 0.0f,
    //    -0.764000f, -0.355297f, 0.0f,
    //    -0.480000f, -0.120298f, 0.0f,
    //    -0.480000f, -0.120298f, 0.0f,
    //    -0.764000f, -0.355297f, 0.0f,
    //    -0.652000f, -0.507798f, 0.0f,
    //    -0.480000f, -0.120298f, 0.0f,
    //    -0.652000f, -0.507798f, 0.0f,
    //    -0.524000f, -0.620297f, 0.0f,
    //    -0.480000f, -0.120298f, 0.0f,
    //    -0.524000f, -0.620297f, 0.0f,
    //    -0.328000f, -0.727798f, 0.0f,
    //    -0.480000f, -0.120298f, 0.0f,
    //    -0.328000f, -0.727798f, 0.0f,
    //    -0.172000f, -0.772798f, 0.0f,
    //    -0.480000f, -0.120298f, 0.0f,
    //    -0.172000f, -0.772798f, 0.0f,
    //    -0.380000f, -0.252798f, 0.0f,
    //    0.452000f, -0.665298f, 0.0f,
    //    0.488000f, -0.087798f, 0.0f,
    //    0.452000f, -0.165297f, 0.0f,
    //    0.452000f, -0.665298f, 0.0f,
    //    0.452000f, -0.165297f, 0.0f,
    //    0.248000f, -0.755298f, 0.0f,
    //    -0.172000f, -0.772798f, 0.0f,
    //    0.112000f, -0.772798f, 0.0f,
    //    0.248000f, -0.755298f, 0.0f,
    //    -0.172000f, -0.772798f, 0.0f,
    //    0.248000f, -0.755298f, 0.0f,
    //    -0.380000f, -0.252798f, 0.0f,
    //    0.452000f, -0.165297f, 0.0f,
    //    0.328000f, -0.297797f, 0.0f,
    //    0.248000f, -0.755298f, 0.0f,
    //    0.328000f, -0.297797f, 0.0f,
    //    0.180000f, -0.377798f, 0.0f,
    //    0.248000f, -0.755298f, 0.0f,
    //    0.180000f, -0.377798f, 0.0f,
    //    0.064000f, -0.405297f, 0.0f,
    //    0.248000f, -0.755298f, 0.0f,
    //    0.064000f, -0.405297f, 0.0f,
    //    -0.148000f, -0.387798f, 0.0f,
    //    0.248000f, -0.755298f, 0.0f,
    //    -0.148000f, -0.387798f, 0.0f,
    //    -0.276000f, -0.332798f, 0.0f,
    //    0.248000f, -0.755298f, 0.0f
    //};

    //std::vector<std::string> groundBounding = {
    //    "135.0000, 308.8810 , 133.0000, 32.8810 , 222.0000, -1.1190 , 222.0000, 308.8810",
    //    "133.0000, 32.8810 , 122.0000, -35.1190 , 113.0000, -266.1190 , 156.0000, -214.1190 , 187.0000, -155.1190 , 212.0000, -74.1190 , 222.0000, -1.1190",
    //    "-135.0000, 308.8810 , -222.0000, 308.8810 , -221.0000, -1.1190 , -135.0000, 31.8810",
    //    "-135.0000, 31.8810 , -221.0000, -1.1190 , -212.0000, -75.1190 , -191.0000, -142.1190 , -120.0000, -48.1190",
    //    "-120.0000, -48.1190 , -191.0000, -142.1190 , -163.0000, -203.1190 , -131.0000, -248.1190 , -82.0000, -291.1190 , -43.0000, -309.1190 , -95.0000, -101.11902",
    //    "113.0000, -266.1190 , 122.0000, -35.1190 , 113.0000, -66.1190 , 62.0000, -302.1190",
    //    "-43.0000, -309.1190 , 28.0000, -309.1190 , 62.0000, -302.1190 , -95.0000, -101.1190",
    //    "113.0000, -66.1190 , 82.0000, -119.1190 , 62.0000, -302.1190",
    //    "82.0000, -119.1190 , 45.0000, -151.1190 , 62.0000, -302.1190",
    //    "45.0000, -151.1190 , 16.0000, -162.1190 , 62.0000, -302.1190",
    //    "16.0000, -162.1190 , -37.0000, -155.1190 , 62.0000, -302.1190",
    //    "-37.0000, -155.1190 , -69.0000, -133.1190 , 62.0000, -302.1190"
    //};


    float vertices[351] = {
-0.876000f, 0.881250f, 0.0f,
-0.886000f, 0.877500f, 0.0f,
-0.886000f, -0.492500f, 0.0f,
-0.876000f, 0.881250f, 0.0f,
-0.886000f, -0.492500f, 0.0f,
-0.794000f, -0.442500f, 0.0f,
-0.876000f, 0.881250f, 0.0f,
-0.794000f, -0.442500f, 0.0f,
-0.802000f, 0.877500f, 0.0f,
-0.876000f, 0.881250f, 0.0f,
-0.802000f, 0.877500f, 0.0f,
-0.872000f, 0.881250f, 0.0f,
0.804000f, 0.881250f, 0.0f,
0.794000f, 0.875000f, 0.0f,
0.782000f, -0.525000f, 0.0f,
0.804000f, 0.881250f, 0.0f,
0.782000f, -0.525000f, 0.0f,
0.874000f, -0.515000f, 0.0f,
0.804000f, 0.881250f, 0.0f,
0.874000f, -0.515000f, 0.0f,
0.874000f, 0.880000f, 0.0f,
-0.704000f, -0.758750f, 0.0f,
-0.564000f, -0.828750f, 0.0f,
-0.428000f, -0.868750f, 0.0f,
-0.704000f, -0.758750f, 0.0f,
-0.428000f, -0.868750f, 0.0f,
-0.862000f, -0.580000f, 0.0f,
-0.704000f, -0.758750f, 0.0f,
-0.862000f, -0.580000f, 0.0f,
-0.800000f, -0.676250f, 0.0f,
0.530000f, -0.837500f, 0.0f,
0.644000f, -0.788750f, 0.0f,
-0.040000f, -0.911250f, 0.0f,
0.530000f, -0.837500f, 0.0f,
-0.040000f, -0.911250f, 0.0f,
0.188000f, -0.903750f, 0.0f,
0.530000f, -0.837500f, 0.0f,
0.188000f, -0.903750f, 0.0f,
0.372000f, -0.878750f, 0.0f,
0.850000f, -0.590000f, 0.0f,
0.874000f, -0.515000f, 0.0f,
0.750000f, -0.600000f, 0.0f,
0.850000f, -0.590000f, 0.0f,
0.750000f, -0.600000f, 0.0f,
0.704000f, -0.661250f, 0.0f,
0.850000f, -0.590000f, 0.0f,
0.704000f, -0.661250f, 0.0f,
0.644000f, -0.788750f, 0.0f,
0.850000f, -0.590000f, 0.0f,
0.644000f, -0.788750f, 0.0f,
0.722000f, -0.740000f, 0.0f,
0.850000f, -0.590000f, 0.0f,
0.722000f, -0.740000f, 0.0f,
0.782000f, -0.687500f, 0.0f,
-0.252000f, -0.898750f, 0.0f,
-0.040000f, -0.911250f, 0.0f,
-0.200000f, -0.861250f, 0.0f,
-0.252000f, -0.898750f, 0.0f,
-0.200000f, -0.861250f, 0.0f,
-0.336000f, -0.841250f, 0.0f,
-0.252000f, -0.898750f, 0.0f,
-0.336000f, -0.841250f, 0.0f,
-0.428000f, -0.868750f, 0.0f,
-0.794000f, -0.442500f, 0.0f,
-0.886000f, -0.492500f, 0.0f,
-0.862000f, -0.580000f, 0.0f,
-0.794000f, -0.442500f, 0.0f,
-0.862000f, -0.580000f, 0.0f,
-0.790000f, -0.527500f, 0.0f,
-0.790000f, -0.527500f, 0.0f,
-0.862000f, -0.580000f, 0.0f,
-0.778000f, -0.565000f, 0.0f,
-0.778000f, -0.565000f, 0.0f,
-0.862000f, -0.580000f, 0.0f,
-0.738000f, -0.632500f, 0.0f,
-0.738000f, -0.632500f, 0.0f,
-0.862000f, -0.580000f, 0.0f,
-0.698000f, -0.677500f, 0.0f,
-0.698000f, -0.677500f, 0.0f,
-0.862000f, -0.580000f, 0.0f,
-0.646000f, -0.720000f, 0.0f,
0.782000f, -0.525000f, 0.0f,
0.750000f, -0.600000f, 0.0f,
0.874000f, -0.515000f, 0.0f,
0.704000f, -0.661250f, 0.0f,
0.632000f, -0.723750f, 0.0f,
0.644000f, -0.788750f, 0.0f,
0.632000f, -0.723750f, 0.0f,
0.560000f, -0.766250f, 0.0f,
0.644000f, -0.788750f, 0.0f,
0.560000f, -0.766250f, 0.0f,
0.456000f, -0.808750f, 0.0f,
0.644000f, -0.788750f, 0.0f,
0.456000f, -0.808750f, 0.0f,
0.304000f, -0.846250f, 0.0f,
0.644000f, -0.788750f, 0.0f,
0.304000f, -0.846250f, 0.0f,
0.216000f, -0.858750f, 0.0f,
-0.040000f, -0.911250f, 0.0f,
0.216000f, -0.858750f, 0.0f,
0.088000f, -0.868750f, 0.0f,
-0.040000f, -0.911250f, 0.0f,
0.088000f, -0.868750f, 0.0f,
-0.096000f, -0.868750f, 0.0f,
-0.040000f, -0.911250f, 0.0f,
-0.096000f, -0.868750f, 0.0f,
-0.200000f, -0.861250f, 0.0f,
-0.040000f, -0.911250f, 0.0f,
-0.336000f, -0.841250f, 0.0f,
-0.474000f, -0.805000f, 0.0f,
-0.428000f, -0.868750f, 0.0f,
-0.474000f, -0.805000f, 0.0f,
-0.550000f, -0.775000f, 0.0f,
-0.428000f, -0.868750f, 0.0f,
-0.550000f, -0.775000f, 0.0f,
-0.646000f, -0.720000f, 0.0f,
-0.428000f, -0.868750f, 0.0f
};


    std::vector<std::string> groundBounding = {
"133.0000, -336.0000 , 163.0000, -315.0000 , 185.0000, -292.0000 , 201.0000, -267.0000 , 157.0000, -292.0000 , 133.0000, -313.0000 , 95.0000, -351.0000",
"-200.0000, -271.0000 , -189.0000, -288.0000 , -170.0000, -310.0000 , -153.0000, -324.0000 , -190.0000, -240.0000 , -220.0000, -199.0000 , -216.0000, -226.0000 , -208.0000, -252.0000",
"213.0000, -237.0000 , 219.0000, -208.0000 , 191.0000, -230.0000 , 172.0000, -273.0000 , 201.0000, -267.0000",
"-120.0000, -343.0000 , -93.0000, -353.0000 , -57.0000, -361.0000 , -11.0000, -365.0000 , -51.0000, -344.0000 , -85.0000, -336.0000 , -153.0000, -324.0000",
"62.0000, -359.0000 , 95.0000, -351.0000 , -25.0000, -347.0000 , -11.0000, -365.0000",
"199.0000, 351.0000 , 196.0000, -147.0000 , 219.0000, -208.0000 , 219.0000, 352.0000",
"196.0000, -147.0000 , 195.0000, -212.0000 , 219.0000, -208.0000 ",
"195.0000, -212.0000 , 191.0000, -230.0000 , 219.0000, -208.0000 ",
"172.0000, -273.0000 , 157.0000, -292.0000 , 201.0000, -267.0000 ",
"-201.0000, 352.0000 , -221.0000, 351.0000 , -220.0000, -199.0000 , -198.0000, -178.0000",
"-198.0000, -178.0000 , -220.0000, -199.0000 , -197.0000, -213.0000",
"-197.0000, -213.0000 , -220.0000, -199.0000 , -190.0000, -240.0000",
"133.0000, -313.0000 , 107.0000, -328.0000 , 95.0000, -351.00002",
"107.0000, -328.0000 , 77.0000, -339.0000 , 95.0000, -351.0000",
"77.0000, -339.0000 , 23.0000, -348.0000 , 95.0000, -351.0000",
"-25.0000, -347.0000 , -51.0000, -344.0000 , -11.0000, -365.0000",
"-85.0000, -336.0000 , -118.0000, -323.0000 , -153.0000, -324.0000",
"-118.0000, -323.0000 , -142.0000, -307.0000 , -153.0000, -324.0000",
"-142.0000, -307.0000 , -161.0000, -289.0000 , -153.0000, -324.0000",
"-161.0000, -289.0000 , -180.0000, -262.0000 , -153.0000, -324.0000",
"-190.0000, -240.0000 , -153.0000, -324.0000 , -180.0000, -262.0000"
    };

    int width;
    int height;    
    unsigned int VBO;
    unsigned int VAO;
    unsigned int shaderProgram;
    glm::mat4 transformationMatrix;

public:
    void setWidthHeight(int, int) override;
    void init(std::string, std::string) override;
    void update(const glm::vec2&, float) override;
    void render() override;
    void useShaderProg() override;
    void draw() override;

    std::vector<std::string> getBinding() override {
        return groundBounding;
    }
};

class ShapeFactory {
public:
    std::shared_ptr<Shape> createShape(const std::string& shapeType);
};

class Circle : public Shape {
private:

    //float vertices[10] = {
    //    1.0f, 0.0f, 0.0f,
    //    -0.5f, 0.866f, 0.0f,
    //    -0.5f, -0.866f, 0.0f
    //};

    static const int vertexCount = 30; // 36 vertices for a smoother circle
    float vertices[vertexCount * 3] = {}; // 3 components (x, y, z) per vertex
    int radius;
    unsigned int VBO;
    unsigned int VAO;
    unsigned int shaderProgram;
    glm::mat4 transformationMatrix;

public:
    void init(std::string, std::string) override;
    void update(const glm::vec2&, float) override;
    void render() override;
    void useShaderProg() override;
    void draw() override;

    void setRadius(int r) override {
        radius = r;
    }

    void generateCircleVertices() override {
        for (int i = 0; i < vertexCount; ++i) {
            float angle = 2.0f * M_PI * float(i) / float(vertexCount);

            vertices[i * 3] = radius * cos(angle);
            vertices[i * 3 + 1] = radius * sin(angle);      // y-coordinate
            vertices[i * 3 + 2] = 0.0f;                     // z-coordinate
        }
    }
};

#endif // SHAPE_H
